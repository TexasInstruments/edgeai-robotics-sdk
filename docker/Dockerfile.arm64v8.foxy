#  Copyright (C) 2021 Texas Instruments Incorporated - http://www.ti.com/
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#    Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#    Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the
#    distribution.
#
#    Neither the name of Texas Instruments Incorporated nor the names of
#    its contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

ARG USE_PROXY
ARG HTTP_PROXY
ARG REPO_LOCATION=arm64v8
ARG GIT_REPO=jacinto_ros_perception
ARG DEBIAN_FRONTEND=noninteractive

#=========================================================================
#FROM ros:foxy-ros-core-focal AS base-0
FROM ${REPO_LOCATION}/ubuntu:20.04 AS base-0

#=========================================================================
FROM base-0 AS base-1
ARG USE_PROXY
ENV USE_PROXY=${USE_PROXY}
ARG HTTP_PROXY
ENV http_proxy=${HTTP_PROXY}
ENV https_proxy=${HTTP_PROXY}

#=========================================================================
FROM base-${USE_PROXY} AS ubuntu-stage1
ARG DEBIAN_FRONTEND

# setup proxy settings
ARG GIT_REPO
ARG DOCKER_PATH=${GIT_REPO}/docker
ADD ${DOCKER_PATH}/setup_proxy.sh /root/
ADD ${DOCKER_PATH}/proxy /root/proxy
RUN /root/setup_proxy.sh

RUN apt-get update && apt-get install -y \
    wget curl git vim tmux net-tools iputils-ping corkscrew usbutils && \
    rm -rf /var/lib/apt/lists/*

#=========================================================================
FROM ubuntu-stage1 AS ubuntu-ros
ARG DEBIAN_FRONTEND

# setup timezone
RUN echo 'Etc/UTC' > /etc/timezone && \
    ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime && \
    apt-get update && \
    apt-get install -q -y --no-install-recommends tzdata && \
    rm -rf /var/lib/apt/lists/*

# install packages
RUN apt-get update && apt-get install -q -y --no-install-recommends \
    dirmngr \
    gnupg2 \
    && rm -rf /var/lib/apt/lists/*

# setup sources.list
RUN echo "deb http://packages.ros.org/ros2/ubuntu focal main" > /etc/apt/sources.list.d/ros2-latest.list

# setup keys
# RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
# workaround in case apt-key above does not work, e.g., behind a proxy
RUN curl -sSL 'http://keyserver.ubuntu.com/pks/lookup?op=get&search=0xC1CF6E31E6BADE8868B172B4F42ED6FBAB17C654' | apt-key add -

# install tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    git \
    python3 \
    python3-rosdep \
    python3-dev \
    python3-pip \
    python3-numpy \
    python3-opencv \
    python3-rosdep \
    && rm -rf /var/lib/apt/lists/*

# setup environment variables
ARG PROJECT_HOME=j7ros_home
ENV LANG            C.UTF-8
ENV LC_ALL          C.UTF-8
ENV ROS_DISTRO      foxy
ENV WORK_DIR        /root/${PROJECT_HOME}
ENV ROS_WS          $WORK_DIR/ros_ws
ENV ROS2_DISTRO     $ROS_DISTRO

# bootstrap rosdep
RUN rosdep init && \
    rosdep update --rosdistro $ROS_DISTRO

# install ros2 packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-foxy-ros-core=0.9.2-1* \
    && rm -rf /var/lib/apt/lists/*

RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-foxy-rosbag2 \
    python3-colcon-common-extensions \
    python3-colcon-mixin \
    && rm -rf /var/lib/apt/lists/*

# Install rosbags
RUN apt-get update && \
    pip3 install rosbags \
    && rm -rf /var/lib/apt/lists/*

# settings for tivision_apps.so: install OpenGL, libdevil-dev
RUN apt-get update && apt-get install -y \
    libdevil-dev libglu1-mesa-dev freeglut3-dev mesa-common-dev \
    && rm -rf /var/lib/apt/lists/*

RUN apt-get update && apt-get install -y \
    libegl-mesa0 libgles2-mesa libegl-dev \
    && rm -rf /var/lib/apt/lists/*

# Install miscellaneous packages
RUN apt-get update -y && apt-get dist-upgrade -y && apt-get install -y \
    ncurses-dev \
    libyaml-cpp-dev \
    rsync \
    strace \
    sysstat \
    gdb \
    net-tools \
    dialog \
    chrony \
    nfs-common \
    corkscrew \
    && rm -rf /var/lib/apt/lists/*

# install ROS apps
COPY . $ROS_WS/src

# install ROS dependency and remove ROS2 apps. ROS2 apps will be volume-mapped at "docker run"
RUN apt-get update && \
    rosdep install --from-paths $ROS_WS/src/jacinto_ros_perception/ros2 --ignore-src -r -y && \
    rm -rf $ROS_WS/src && \
    rm -rf /var/lib/apt/lists/*

# add scripts
ARG  GIT_REPO
COPY ${GIT_REPO}/docker/entrypoint_arm64v8.sh /root/entrypoint.sh
ADD  ${GIT_REPO}/docker/ros_setup.sh /root/

# .profile and .bashrc
WORKDIR /root
RUN echo "if [ -n \"$BASH_VERSION\" ]; then"     >  .profile && \
    echo "    # include .bashrc if it exists"    >> .profile && \
    echo "    if [ -f \"$HOME/.bashrc\" ]; then" >> .profile && \
    echo "        . \"$HOME/.bashrc\""           >> .profile && \
    echo "    fi"                                >> .profile && \
    echo "fi"                                    >> .profile && \
    echo "#!/bin/bash"                           >  .bashrc  && \
    echo "export PS1=\"${debian_chroot:+($debian_chroot)}\u@j7-docker:\w\$ \"" >> .bashrc

# workdir for ROS apps
WORKDIR ${ROS_WS}

# setup entrypoint
ENTRYPOINT ["/root/entrypoint.sh"]


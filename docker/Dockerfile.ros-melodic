#  Copyright (C) 2021 Texas Instruments Incorporated - http://www.ti.com/
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#    Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#    Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the
#    distribution.
#
#    Neither the name of Texas Instruments Incorporated nor the names of
#    its contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#=========================================================================
# This Dockerfile is for installing ROS-Melodic (ros-perception packages) on
# arm64v8/ubuntu:18.04 base image along with other depedencidies to build
# and run the applications provided in Robotics SDK.
#
# Note: 1. "jacinto_ros_perception" is assumed to be populated under $WORK_DIR/catkin_ws/src
#       2. "docker build" should be run in $WORK_DIR, for example:
# cd $WORK_DIR
# docker build -t <tag> -f ./catkin_ws/src/jacinto_ros_perception/docker/Dockerfile.ros-melodic .

ARG USE_PROXY
ARG HTTP_PROXY
ARG REPO_LOCATION=arm64v8
ARG DEBIAN_FRONTEND=noninteractive

#=========================================================================
FROM ${REPO_LOCATION}/ubuntu:18.04 AS base-0

#=========================================================================
FROM base-0 AS base-1
ARG USE_PROXY
ENV USE_PROXY=${USE_PROXY}
ARG HTTP_PROXY
ENV http_proxy=${HTTP_PROXY}
ENV https_proxy=${HTTP_PROXY}

#=========================================================================
FROM base-${USE_PROXY} AS ubuntu-stage1
ARG DEBIAN_FRONTEND

# add scripts and setup proxy settings
ARG GIT_REPO=jacinto_ros_perception
ADD catkin_ws/src/${GIT_REPO}/docker/setup_proxy.sh \
    catkin_ws/src/${GIT_REPO}/docker/entrypoint.sh \
    catkin_ws/src/${GIT_REPO}/docker/ros_setup.sh /root/

ADD catkin_ws/src/${GIT_REPO}/docker/proxy /root/proxy

RUN /root/setup_proxy.sh

# install dependency for tivision_apps.so: OpenGL, libdevil-dev
RUN apt-get update && apt-get install -y \
    libdevil-dev libglu1-mesa-dev freeglut3-dev mesa-common-dev && \
    rm -rf /var/lib/apt/lists/*

# install utils
RUN apt-get update && apt-get install -y \
    wget curl git vim tmux net-tools iputils-ping corkscrew usbutils && \
    rm -rf /var/lib/apt/lists/*

#=========================================================================
FROM ubuntu-stage1 AS ubuntu-stage2
ARG DEBIAN_FRONTEND

# install software-properties-common to use add-apt-repository
RUN apt-get update && apt-get install -y \
    software-properties-common && \
    rm -rf /var/lib/apt/lists/*

# install gcc-9: add-apt-repository needs env variables http_proxy and https_proxy in a proxy network
RUN add-apt-repository -y ppa:ubuntu-toolchain-r/test && \
    apt-get update && apt-get install -y --no-install-recommends \
    gcc-9 g++-9 && \
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 90 --slave /usr/bin/g++ g++ /usr/bin/g++-9 && \
    rm -rf /var/lib/apt/lists/*

#=========================================================================
FROM ubuntu-stage2 AS ubuntu-ros
ARG DEBIAN_FRONTEND
# install ROS

# setup timezone
RUN echo 'Etc/UTC' > /etc/timezone && \
    ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime && \
    apt-get update && \
    apt-get install -q -y --no-install-recommends tzdata && \
    rm -rf /var/lib/apt/lists/*

# install packages
RUN apt-get update && apt-get install -q -y --no-install-recommends \
    dirmngr \
    gnupg2 \
    && rm -rf /var/lib/apt/lists/*

# setup sources.list
RUN echo "deb http://packages.ros.org/ros/ubuntu bionic main" > /etc/apt/sources.list.d/ros1-latest.list

# setup keys
# RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
# workaround in case apt-key above does not work, e.g., behind a proxy
RUN curl -sSL 'http://keyserver.ubuntu.com/pks/lookup?op=get&search=0xC1CF6E31E6BADE8868B172B4F42ED6FBAB17C654' | apt-key add -

# install bootstrap tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    python-rosdep \
    python-rosinstall \
    python-vcstools \
    && rm -rf /var/lib/apt/lists/*

# setup environment variables
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8
ENV ROS_DISTRO=melodic
ARG PROJECT_HOME=j7ros_home
ENV WORK_DIR=/root/${PROJECT_HOME}
ENV CATKIN_WS=${WORK_DIR}/catkin_ws

# bootstrap rosdep
RUN rosdep init && \
    rosdep update --rosdistro ${ROS_DISTRO}

# install ros-core packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-melodic-ros-core=1.4.1-0* \
    ros-melodic-perception=1.4.1-0* \
    && rm -rf /var/lib/apt/lists/*

#=========================================================================
FROM ubuntu-ros
ARG DEBIAN_FRONTEND

# install python packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    python-pip && \
    python2 -m pip install configparser argparse && \
    rm -rf /var/lib/apt/lists/*

# update USB IDs
RUN update-usbids -q

# .profile and .bashrc
WORKDIR /root
RUN echo "if [ -n \"$BASH_VERSION\" ]; then"     >  .profile && \
    echo "    # include .bashrc if it exists"    >> .profile && \
    echo "    if [ -f \"$HOME/.bashrc\" ]; then" >> .profile && \
    echo "        . \"$HOME/.bashrc\""           >> .profile && \
    echo "    fi"                                >> .profile && \
    echo "fi"                                    >> .profile && \
    echo "#!/bin/bash"                           >  .bashrc  && \
    echo "export PS1=\"${debian_chroot:+($debian_chroot)}\u@j7-docker:\w\$ \"" >> .bashrc

# workdir for ROS apps
WORKDIR ${CATKIN_WS}

# setup entrypoint
ENTRYPOINT ["/root/entrypoint.sh"]
